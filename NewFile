kopackage com.epay.merchant.service;

import com.epay.merchant.dao.AlertMasterDao;
import com.epay.merchant.dto.AlertManagementDto;
import com.epay.merchant.dto.AlertMasterDto;
import com.epay.merchant.util.DateTimeUtils;
import com.sbi.epay.logging.utility.LoggerFactoryUtility;
import com.sbi.epay.logging.utility.LoggerUtility;
import lombok.RequiredArgsConstructor;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.stream.Collectors;

@RequiredArgsConstructor
@Component
public class AccountExpirationScheduler {

    private final AlertMasterDao alertMasterDao;
    private final LoggerUtility logger = LoggerFactoryUtility.getLogger(this.getClass());

    @Scheduled(cron = "${scheduled.cron.time}")
    public void checkAccountExpiry() {
        logger.info("Starting account expiry check.");
        List<AlertMasterDto> alertMasterDtoList = alertMasterDao.findAllAlertDaysByName("Account Expiry");

        if (alertMasterDtoList.isEmpty()) {
            logger.info("No alert days found for 'Account Expiry'. Exiting.");
            return;
        }

        Map<String, Long> dayAndTimeMap = createDayAndTimeMap(alertMasterDtoList);
        Map<String, AlertMasterDto> dayAndAlertMasterDtoMapped = mapAlertMasterDtoWithDay(alertMasterDtoList);
        Map<String, List<String>> mapOfAllMidsWithDay = alertMasterDao.findMidsForEachDay(dayAndTimeMap);

        if (mapOfAllMidsWithDay.isEmpty()) {
            logger.info("No MIDs found for the specified alert days. Exiting.");
            return;
        }

        List<AlertManagementDto> alertManagementDtoList = createAlertManagementDtoList(dayAndAlertMasterDtoMapped, mapOfAllMidsWithDay);
        alertMasterDao.saveAllToAlertManagement(alertManagementDtoList);
        logger.info("Account expiry check completed. Saved {} alerts.", alertManagementDtoList.size());
    }

    private Map<String, Long> createDayAndTimeMap(List<AlertMasterDto> alertMasterDtoList) {
        return alertMasterDtoList.stream()
                .collect(Collectors.toMap(
                        AlertMasterDto::getValue,
                        dto -> DateTimeUtils.getFutureDateByDay(Integer.parseInt(dto.getUnit()))
                ));
    }

    private Map<String, AlertMasterDto> mapAlertMasterDtoWithDay(List<AlertMasterDto> alertMasterDtoList) {
        return alertMasterDtoList.stream()
                .collect(Collectors.toMap(AlertMasterDto::getValue, dto -> dto));
    }

    private List<AlertManagementDto> createAlertManagementDtoList(Map<String, AlertMasterDto> dayAndAlertMasterDtoMapped, Map<String, List<String>> mapOfAllMidsWithDay) {
        return mapOfAllMidsWithDay.entrySet().stream()
                .flatMap(entry -> entry.getValue().stream()
                        .map(mid -> AlertManagementDto.builder()
                                .alertId(dayAndAlertMasterDtoMapped.get(entry.getKey()).getId())
                                .mId(mid)
                                .description(dayAndAlertMasterDtoMapped.get(entry.getKey()).getDescription())
                                .build()))
                .collect(Collectors.toList());
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    @Query("SELECT mi.mid FROM MerchantInfo mi WHERE FUNCTION('TRUNC', TO_DATE(FUNCTION('TO_CHAR', mi.validityEndTime / 1000, 'YYYY-MM-DD'), 'YYYY-MM-DD')) = FUNCTION('TRUNC', TO_DATE(:validityEndTime / 1000, 'YYYY-MM-DD'))")
    List<String> findMidsByExactDate(@Param("validityEndTime") Long validityEndTime);
Caused by: org.hibernate.query.sqm.produce.function.FunctionArgumentException: Parameter 1 of function 'trunc()' has type 'NUMERIC', but argument is of type 'java.sql.Date' mapped to 'DATE'


@Query("SELECT mi.mid FROM MerchantInfo mi " +
       "WHERE FUNCTION('TRUNC', FUNCTION('TO_DATE', TO_CHAR(mi.validityEndTime / 1000, 'YYYY-MM-DD'), 'YYYY-MM-DD')) = " +
       "FUNCTION('TRUNC', FUNCTION('TO_DATE', TO_CHAR(:validityEndTime / 1000, 'YYYY-MM-DD'), 'YYYY-MM-DD'))")
List<String> findMidsByExactDate(@Param("validityEndTime") Long validityEndTime);



@Query("SELECT mi.mid FROM MerchantInfo mi " +
       "WHERE FUNCTION('TRUNC', FUNCTION('FROM_UNIXTIME', mi.validityEndTime / 1000)) = " +
       "FUNCTION('TRUNC', FUNCTION('FROM_UNIXTIME', :validityEndTime / 1000))")
List<String> findMidsByExactDate(@Param("validityEndTime") Long validityEndTime);

@Query("SELECT mi.mid FROM MerchantInfo mi WHERE FUNCTION('TRUNC', FUNCTION('TO_DATE', mi.validityEndTime / 1000, 'YYYY-MM-DD')) = FUNCTION('TRUNC', FUNCTION('TO_DATE', :validityEndTime / 1000, 'YYYY-MM-DD'))")
List<String> findMidsByExactDate(@Param("validityEndTime") Long validityEndTime);
-----
    @Query("SELECT mi.mId FROM MerchantInfo mi WHERE FUNCTION('TRUNC', FUNCTION('TO_DATE', mi.validityEndTime / 1000, 'YYYY-MM-DD')) = FUNCTION('TRUNC', FUNCTION('TO_DATE', :validityEndTime / 1000, 'YYYY-MM-DD'))")
    List<String> findMidsByExactDate(@Param("validityEndTime") Long validityEndTime);

Caused by: org.hibernate.query.sqm.produce.function.FunctionArgumentException: Parameter 1 of function 'to_date()' has type 'STRING', but argument is of type 'java.lang.Long' mapped to 'BIGINT'
-------------

@Query("SELECT mi.mId FROM MerchantInfo mi WHERE FUNCTION('TRUNC', FUNCTION('TO_DATE', TO_CHAR(mi.validityEndTime / 1000, 'YYYY-MM-DD'), 'YYYY-MM-DD')) = FUNCTION('TRUNC', FUNCTION('TO_DATE', TO_CHAR(:validityEndTime / 1000, 'YYYY-MM-DD'), 'YYYY-MM-DD'))")
List<String> findMidsByExactDate(@Param("validityEndTime") Long validityEndTime);


@Query(value = "SELECT mi.mId " +
               "FROM MerchantInfo mi " +
               "WHERE TRUNC(TO_DATE(TO_CHAR(mi.validityEndTime / 1000, 'YYYY-MM-DD'), 'YYYY-MM-DD')) = " +
               "      TRUNC(TO_DATE(TO_CHAR(:validityEndTime / 1000, 'YYYY-MM-DD'), 'YYYY-MM-DD'))", 
       nativeQuery = true)
List<String> findMidsByExactDate(@Param("validityEndTime") Long validityEndTime);


select MID, TO_CHAR(DATE '1970-01-01' + NUMTODSINTERVAL(VALIDITY_END_TIME/1000, 'SECOND'),'DD-MON-YYYY') As validity_date from merchant_info Where TO_CHAR(DATE '1970-01-01' + NUMTODSINTERVAL(VALIDITY_END_TIME/1000, 'SECOND'),'DD-MON-YYYY') IN ('18-DEC-2025', '07-JAN-2025')


import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;

public class DateConverter {
    public static String convertLongToDateString(Long timestamp) {
        if (timestamp == null) {
            throw new IllegalArgumentException("Timestamp cannot be null");
        }

        // Convert Long timestamp to LocalDate
        LocalDate date = Instant.ofEpochMilli(timestamp)
                                 .atZone(ZoneId.systemDefault())
                                 .toLocalDate();

        // Define the formatter for dd-MMM-yyyy
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MMM-yyyy");

        // Format the date to the required format
        return date.format(formatter);
    }

    public static void main(String[] args) {
        Long sampleTimestamp = 1730943523109L; // Example timestamp
        String formattedDate = convertLongToDateString(sampleTimestamp);
        System.out.println("Formatted Date: " + formattedDate); // Output: 07-Jan-2025
    }
}


@Query("SELECT mi.mid, " +
       "TRUNC(DATE '1970-01-01' + NUMTODSINTERVAL(mi.validityEndTime / 1000, 'SECOND')) " +
       "FROM MerchantInfo mi " +
       "WHERE TRUNC(DATE '1970-01-01' + NUMTODSINTERVAL(mi.validityEndTime / 1000, 'SECOND')) IN :days")
List<Object[]> findMidsByExactDate(@Param("days") List<String> days);

Caused by: org.hibernate.query.SyntaxException: At 1:26 and token ''1970-01-01'', no viable alternative at input 'SELECT mi.mid, TRUNC(DATE *'1970-01-01' + NUMTODSINTERVAL(mi.validityEndTime / 1000, 'SECOND')) FROM MerchantInfo mi WHERE TRUNC(DATE '1970-01-01' + NUMTODSINTERVAL(mi.validityEndTime / 1000, 'SECOND')) IN :days' [SELECT mi.mid, TRUNC(DATE '1970-01-01' + NUMTODSINTERVAL(mi.validityEndTime / 1000, 'SECOND')) FROM MerchantInfo mi WHERE TRUNC(DATE '1970-01-01' + NUMTODSINTERVAL(mi.validityEndTime / 1000, 'SECOND')) IN :days]



INSERT INTO MERCHANT_BANK_ACCOUNT (
    ID,
    MID,
    ACCOUNT_HOLDER_NAME,
    ACCOUNT_UNIQUE_IDENTIFIER,
    ACCOUNT_TYPE,
    ACCOUNT_NUMBER,
    BANK_NAME,
    BRANCH_NAME,
    IFSC_CODE,
    IS_APPROVED,
    IS_PRIMARY,
    APPROVED_REJECTED_BY,
    REJECTED_REASON,
    APPROVED_REJECTED_ON,
    STATUS,
    CREATED_AT,
    CREATED_BY,
    UPDATED_BY,
    UPDATED_AT
) 
VALUES (
    SYS_GUID(), -- Automatically generates a unique ID
    'MID123456789', -- Replace with the MID from MERCHANT_INFO
    'John Doe', -- Account holder name
    'AUI12345', -- Unique account identifier
    'SAVINGS', -- Account type
    '1234567890123456', -- Account number
    'Bank of XYZ', -- Bank name
    'Main Branch', -- Branch name
    'IFSC0001234', -- IFSC code
    1, -- Is approved (0 for false, 1 for true)
    1, -- Is primary (0 for false, 1 for true)
    'AdminUser', -- Approved or rejected by
    'N/A', -- Rejection reason (if applicable)
    1672502400, -- Approved/rejected on (epoch time)
    'ACTIVE', -- Status
    1672502400, -- Created at (epoch time)
    'SystemAdmin', -- Created by
    'SystemAdmin', -- Updated by
    1672502400  -- Updated at (epoch time)
);


@Configuration
@EnableBatchProcessing
public class BatchConfig {

    private final JobBuilderFactory jobBuilderFactory;
    private final StepBuilderFactory stepBuilderFactory;
    private final EntityManagerFactory entityManagerFactory;

    public BatchConfig(JobBuilderFactory jobBuilderFactory, StepBuilderFactory stepBuilderFactory, EntityManagerFactory entityManagerFactory) {
        this.jobBuilderFactory = jobBuilderFactory;
        this.stepBuilderFactory = stepBuilderFactory;
        this.entityManagerFactory = entityManagerFactory;
    }

    @Bean
    public Job job(Step step) {
        return jobBuilderFactory.get("insertReportScheduleJob")
                .start(step)
                .build();
    }

    @Bean
    public Step step(ItemReader<ReportScheduleManagement> reader, ItemProcessor<ReportScheduleManagement, ReportScheduleManagement> processor,
                     ItemWriter<ReportScheduleManagement> writer) {
        return stepBuilderFactory.get("insertReportScheduleStep")
                .<ReportScheduleManagement, ReportScheduleManagement>chunk(10)
                .reader(reader)
                .processor(processor)
                .writer(writer)
                .build();
    }
}


<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-batch</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
        <groupId>com.h2database</groupId>
        <artifactId>h2</artifactId>
        <scope>runtime</scope>
    </dependency>
</dependencies>


@Component
public class ReportScheduleReader implements ItemReader<ReportScheduleManagement> {

    private final List<ReportScheduleManagement> data = new ArrayList<>();
    private int nextIndex = 0;

    public ReportScheduleReader() {
        for (int i = 1; i <= 100; i++) {
            ReportScheduleManagement record = new ReportScheduleManagement();
            record.setReportId(UUID.randomUUID());
            record.setMid("MID_" + i);
            record.setFrequency("DAILY");
            record.setFormat("PDF");
            record.setScheduleExecutionTime("12:00");
            record.setNextScheduleExecutionTime(System.currentTimeMillis());
            record.setLastScheduleExecutionTime(null);
            record.setStatus("ACTIVE");
            record.setCreatedAt(System.currentTimeMillis());
            record.setCreatedBy("System");
            record.setUpdatedAt(System.currentTimeMillis());
            record.setUpdatedBy("System");
            data.add(record);
        }
    }

    @Override
    public ReportScheduleManagement read() {
        if (nextIndex < data.size()) {
            return data.get(nextIndex++);
        }
        return null;
    }
}


@Component
public class ReportScheduleProcessor implements ItemProcessor<ReportScheduleManagement, ReportScheduleManagement> {
    @Override
    public ReportScheduleManagement process(ReportScheduleManagement item) {
        // Add any additional processing logic if needed
        return item;
    }
}


@Component
public class ReportScheduleWriter implements ItemWriter<ReportScheduleManagement> {

    private final ReportScheduleManagementRepository repository;

    public ReportScheduleWriter(ReportScheduleManagementRepository repository) {
        this.repository = repository;
    }

    @Override
    public void write(List<? extends ReportScheduleManagement> items) {
        repository.saveAll(items);
    }
}


@Component
public class BatchRunner implements CommandLineRunner {

    private final JobLauncher jobLauncher;
    private final Job job;

    public BatchRunner(JobLauncher jobLauncher, Job job) {
        this.jobLauncher = jobLauncher;
        this.job = job;
    }

    @Override
    public void run(String... args) throws Exception {
        JobParameters params = new JobParametersBuilder()
                .addLong("startAt", System.currentTimeMillis())
                .toJobParameters();
        jobLauncher.run(job, params);
    }
}



@Configuration
@EnableBatchProcessing
public class BatchConfig {

    private final JobRepository jobRepository;
    private final PlatformTransactionManager transactionManager;

    public BatchConfig(JobRepository jobRepository, PlatformTransactionManager transactionManager) {
        this.jobRepository = jobRepository;
        this.transactionManager = transactionManager;
    }

    @Bean
    public Job job(Step step) {
        return new JobBuilder("insertReportScheduleJob", jobRepository)
                .start(step)
                .build();
    }

    @Bean
    public Step step(ItemReader<ReportScheduleManagement> reader, 
                     ItemProcessor<ReportScheduleManagement, ReportScheduleManagement> processor,
                     ItemWriter<ReportScheduleManagement> writer) {
        return new StepBuilder("insertReportScheduleStep", jobRepository)
                .<ReportScheduleManagement, ReportScheduleManagement>chunk(10, transactionManager)
                .reader(reader)
                .processor(processor)
                .writer(writer)
                .build();
    }
}


dependencies {
    // Spring Boot Starter for Spring Batch
    implementation 'org.springframework.boot:spring-boot-starter-batch'

    // Spring Boot Starter for JPA (for database interaction)
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // H2 Database (Optional: Replace with your preferred database dependency)
    runtimeOnly 'com.h2database:h2'

    // MySQL Database Driver (if you're using MySQL)
    runtimeOnly 'mysql:mysql-connector-java'

    // PostgreSQL Database Driver (if you're using PostgreSQL)
    runtimeOnly 'org.postgresql:postgresql'

    // Lombok (for annotations like @Data, @Builder, etc.)
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Spring Boot Test (for testing)
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
}
