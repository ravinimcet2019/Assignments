User Story: Fetch MID Mapping List
Description
For a merchant's MID management, provide an API to fetch the list of assigned and unassigned MIDs for a given user. This will help in identifying which MIDs are already associated with a user and which are available for assignment.

API Details
Method: POST
API Definition: /v1/mid/mapping/list
Access Type: Secured API
Request Body
json
Copy code
{
  "userId": "string",
  "midList": ["string"]
}
userId: The unique identifier of the parent user. It must be validated to ensure the parent user exists in the system.
midList: List of MIDs to check their assigned or unassigned status.
Both fields are mandatory.

Success Response Body
json
Copy code
{
  "data": {
    "assignedMids": [
      {
        "mid": "string",
        "name": "string"
      }
    ],
    "unassignedMids": [
      {
        "mid": "string",
        "name": "string"
      }
    ]
  },
  "status": 1
}
assignedMids: List of MIDs with their names that are already assigned to the userId.
unassignedMids: List of MIDs with their names that are not assigned to the userId.
Failure Response Body
json
Copy code
{
  "status": 0,
  "error": [
    {
      "errorCode": "string",
      "errorMessage": "string"
    }
  ]
}
errorCode: Specific error code for debugging.
errorMessage: Description of the error encountered.
Testing Checklist
Positive Scenarios:

Test with valid userId and midList containing valid MIDs.
Validate the response contains both assignedMids and unassignedMids.
Negative Scenarios:

Test with invalid userId (not present in the system).
Test with midList containing invalid MIDs.
Test with empty or null userId.
Test with empty or null midList.
Developer Checklist
Class Flow: Ensure a proper flow diagram is uploaded.
Unit Test Coverage: Achieve at least 90% test coverage.
Development Steps
Step 1: Create Validation and Mapping Controller

Develop a REST Controller to expose the /v1/mid/mapping/list endpoint.
Step 2: Implement MID Mapping Service

Validate the userId and ensure it exists in the database.
Check the midList against the database and segregate them into assignedMids and unassignedMids.
Step 3: Create DAO and Repository

User DAO: Implement existsUserId(String userId) to validate if the parent user exists.
MID Repository: Create queries to:
Fetch assigned MIDs: findAssignedMids(String userId, List<String> midList).
Fetch unassigned MIDs: findUnassignedMids(List<String> midList).
Step 4: Return Response

Construct the MerchantResponse with assignedMids and unassignedMids.
Summary of Key Components
Controller:

Exposes the /v1/mid/mapping/list endpoint.
Service:

Handles business logic for validating userId and segregating midList.
Repository:

Interacts with the database to fetch assigned and unassigned MIDs.
Acceptance Criteria
The service should respond quickly, even for large midList inputs.
All requests and responses must be logged for traceability.
Validation errors should return meaningful error messages and codes.
Let me know if you need additional details or adjustments!



Service Layer Implementation
Validate the userId:

Ensure that the userId is valid and exists in the system.
Check for Parent ID:

Query the database to determine if a parentId exists for the given userId.
If parentId Does Not Exist:

Treat all MIDs in the system as assignedMIDs.
If parentId Exists:

Retrieve the MIDs associated with the parentId.
Identify which MIDs are already assigned and which are unassigned.


Return Assigned and Unassigned MIDs:

Provide the assigned MIDs as assignedMids and the remaining MIDs as unassignedMids
-------------------------------------------------------------------------------------

2025-01-02 17:00:42.737 WARN | com.epay.merchant.exceptionhandlers.MerchantExceptionHandler:97 | principal=  | scenario=/v1/merchant/login | operation=POST | correlation=aad461c9-788e-431c-b117-639cfe142c0e | handleDBException | Resolved [org.springframework.dao.InvalidDataAccessResourceUsageException: could not extract ResultSet [ORA-02289: sequence does not exist<EOL><EOL><EOL>https://docs.oracle.com/error-help/db/ora-02289/] [select revinfo_seq.nextval from dual]; SQL [select revinfo_seq.nextval from dual]]





