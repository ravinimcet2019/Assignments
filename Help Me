Description

For a merchant login

API Details

Method: Post

API Definition: /v1/merchant/login

Access Type: Open API

Request Body:



 
{  
 “userName”: string 
 “password”: hash string 
 “requestId”: Alaphanumeric string
 “captchaText”: string 
}





        
      request Type need to be LOGIN

        
      userId Id can be userId or Email or Mobile Number of the user, this has to be unique in the system.

        
      Both fields are mandatory


Succes Response Body

{
  "data": [
    {
       "message": String
    }
   ],
  "status":1,
}



Failure Response Body

{
  "status":0,
  "error": [
     {
       "errorCode": String, 
       "errorMessage": String, 
     }
   ]
}



Testing Checklist


        
      Test with valid user / email / mobile

        
      Test with invalid user / email / mobile

        
      Test with blank / null user / email / mobile


Developer Checklist

Class Flow

to be uploaded

90% Unit test case coverage


Development Steps for Valid User Implementation 
Step 1: Create validation/Login Controller_ -_ Develop a REST Controller to expose the validation/Login API endpoints for user id validation. 
Step 2: Develop Login Service_ -_ Create a service class to handle user validation check as below

Decrypt request payload, check if userId value exists in user-id or email or mobile number column, password and captcha, if valid return JWT Token response else check next step.

Step 3 : Create User DAO and Repository and implement 3 methods as below


        
      
User Dao - Implement existsUserId(String userId) will return boolean

        
      
User Repository - create query with or condition on userId, email or phoneNumber column

        
      
Captcha service - Implement captchaActive(String catptchaVal) will return boolean.

        
      
Captcha repository- create query to fetch getCaptcha(String catptchaVal)

        
      
Login DAO – Implement saveToken(String token) to save information in DB.

        
      
Token Service - Send response to caller.

Summary of Key Components 


        
      
Controller: Exposes endpoints for login validation. 

        
      
Service: Handles logic of all 3 types of checking valid user id, valid email and valid mobile number. 

        
      
Repository: Uses user data in the database for login validation and authentication. 


Acceptance Criteria 


        
      Valid Login service should response quickly, if user request payload is valid or invalid 

        
      All requests and responses must be logged for traceability. 
