package com.coffee.nyl.security;

import com.amazonaws.auth.AWSStaticCredentialsProvider;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.*;
import com.coffee.nyl.config.NylServiceConfig;
import com.coffee.nyl.entity.LockerRoomUsers;
import com.coffee.nyl.exceptions.CoffeeException;
import com.coffee.nyl.util.ErrorConstants;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FilenameUtils;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.net.URI;
import java.net.URL;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;

@Component
@RequiredArgsConstructor
@Slf4j
public class AWSClientService {

    private final NylServiceConfig nylServiceConfig;

    public String uploadNewFile(MultipartFile multipartFile, String fileName, String exp) {
        AmazonS3 s3Client = getAmazonS3Client();
        File fileObj = convert(multipartFile);
        ObjectMetadata data = new ObjectMetadata();
        data.setContentType(multipartFile.getContentType());
        data.setContentLength(multipartFile.getSize());
        String fileNameForS3 = nylServiceConfig.getFolderName()+ "/"+ exp +"/"+ fileName +"."+ FilenameUtils.getExtension(multipartFile.getOriginalFilename());
        PutObjectRequest putObjectRequest = new PutObjectRequest(nylServiceConfig.getS3BucketName(), fileNameForS3, fileObj);
        s3Client.putObject(putObjectRequest);
        fileObj.delete();
        URL url = generatePreSignedUrl(nylServiceConfig.getS3BucketName(), fileNameForS3);

        return url.toString();
    }

    public String uploadBase64File(String base64String, String prizeName, String exp) {
            AmazonS3 s3Client = getAmazonS3Client();
            byte[] fileContent = Base64.getDecoder().decode(base64String);

            ObjectMetadata metadata = new ObjectMetadata();
            metadata.setContentLength(fileContent.length);
            String fileName = nylServiceConfig.getFolderName()+ "/"+ exp +"/"+ prizeName+"_"+ Instant.now().getEpochSecond() +"."+"jpeg";

            ByteArrayInputStream inputStream = new ByteArrayInputStream(fileContent);
            PutObjectRequest request = new PutObjectRequest(nylServiceConfig.getS3BucketName(), fileName, inputStream, metadata);
            s3Client.putObject(request);
            URL url = generatePreSignedUrl(nylServiceConfig.getS3BucketName(), fileName);
            return url.toString();
    }

    public int deleteAllFilesFromS3(List<String> fileUrls) {
        int deletedCount = 0;
        try {
            AmazonS3 s3Client = getAmazonS3Client();
            List<String> objectKeys = new ArrayList<>();

            for (String fileUrl : fileUrls) {
                URI uri = new URI(fileUrl);
                String objectKey = uri.getPath().substring(1);
                if (objectKey != null && !objectKey.isEmpty()) {
                    objectKeys.add(objectKey);
                } else {
                    log.info("Failed to extract object key from URL: {}", fileUrl);
                }
            }

            if (!objectKeys.isEmpty()) {
                DeleteObjectsRequest deleteRequest = new DeleteObjectsRequest(nylServiceConfig.getS3BucketName())
                        .withKeys(objectKeys.toArray(new String[0]));
                DeleteObjectsResult deleteResult = s3Client.deleteObjects(deleteRequest);
                deletedCount = deleteResult.getDeletedObjects().size();
                log.info("Total number of files deleted successfully from S3 bucket: {}", deletedCount);
            } else {
                log.info("No valid object keys found to delete.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            log.error("Error inside awsClientService while deleting files from S3 bucket!", e.getMessage());
            throw new CoffeeException(ErrorConstants.SYSTEM_ERROR_CODE, ErrorConstants.SOMETHING_WENT_WRONG);
        }
        return deletedCount;
    }

    private AmazonS3 getAmazonS3Client() {
        final BasicAWSCredentials basicAWSCredentials = new BasicAWSCredentials(nylServiceConfig.getAwsAccessKey(), nylServiceConfig.getAwsAccessSecret());
        return AmazonS3ClientBuilder
                .standard()
                .withCredentials(new AWSStaticCredentialsProvider(basicAWSCredentials))
                .withRegion(nylServiceConfig.getAwsRegion())
                .build();
    }

    private File convert(MultipartFile file){
        File convertedFile = new File(file.getOriginalFilename());
        try(FileOutputStream fos = new FileOutputStream(convertedFile)) {
            fos.write(file.getBytes());
        } catch (Exception ex) {
            log.error("Error while converting multipartFile to file type", ex.getMessage());
        }
        return convertedFile;
    }

    private URL generatePreSignedUrl(String bucketName, String key) {
        AmazonS3 s3Client = getAmazonS3Client();
        return s3Client.getUrl(bucketName,key);
    }

}
_-----------------

implementation 'software.amazon.awssdk:s3:2.20.18' // Use the latest version
implementation 'software.amazon.awssdk:auth:2.20.18'


package com.example.s3upload.config;

import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.S3Configuration;

import java.net.URI;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class S3Config {

    @Value("${s3.endpoint-url}")
    private String endpointUrl;

    @Value("${s3.region}")
    private String region;

    @Value("${s3.access-key}")
    private String accessKey;

    @Value("${s3.secret-key}")
    private String secretKey;

    @Bean
    public S3Client s3Client() {
        AwsBasicCredentials awsCredentials = AwsBasicCredentials.create(accessKey, secretKey);

        return S3Client.builder()
                .endpointOverride(URI.create(endpointUrl))
                .region(Region.of(region))
                .credentialsProvider(StaticCredentialsProvider.create(awsCredentials))
                .serviceConfiguration(S3Configuration.builder().pathStyleAccessEnabled(true).build())
                .build();
    }
}


package com.example.s3upload.service;

import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.PutObjectRequest;

import java.io.IOException;
import java.nio.file.Paths;

@Service
public class S3UploadService {

    private final S3Client s3Client;

    public S3UploadService(S3Client s3Client) {
        this.s3Client = s3Client;
    }

    public String uploadFile(String bucketName, MultipartFile file) throws IOException {
        String fileName = file.getOriginalFilename();

        // Create a PutObjectRequest
        PutObjectRequest putObjectRequest = PutObjectRequest.builder()
                .bucket(bucketName)
                .key(fileName)
                .build();

        // Upload the file
        s3Client.putObject(putObjectRequest, Paths.get(file.getOriginalFilename()));

        return "File uploaded successfully: " + fileName;
    }
}


s3.endpoint-url=https://s3.amazonaws.com
s3.region=us-east-1
s3.access-key=your-access-key
s3.secret-key=your-secret-key
s3.bucket-name=your-bucket-name
-----------------


package com.example.s3upload.service;

import org.springframework.stereotype.Service;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.PutObjectRequest;
import software.amazon.awssdk.core.sync.RequestBody;

import java.net.URI;
import java.net.URISyntaxException;

@Service
public class S3UploadService {

    private final S3Client s3Client;

    public S3UploadService(S3Client s3Client) {
        this.s3Client = s3Client;
    }

    public String uploadFile(String s3Url, String fileName, byte[] fileBytes) throws URISyntaxException {
        // Parse the S3 URL to extract the bucket name and key
        URI uri = new URI(s3Url);
        String bucketName = uri.getHost().split("\\.")[0]; // Extracts 'my-bucket' from 'my-bucket.s3.amazonaws.com'
        String key = uri.getPath().substring(1); // Extracts 'my-folder/my-file.txt'

        // Adjust the key if needed
        String destinationKey = key.endsWith("/") ? key + fileName : key + "/" + fileName;

        // Create a PutObjectRequest
        PutObjectRequest putObjectRequest = PutObjectRequest.builder()
                .bucket(bucketName)
                .key(destinationKey)
                .build();

        // Upload the file using the byte array
        s3Client.putObject(putObjectRequest, RequestBody.fromBytes(fileBytes));

        return "File uploaded successfully to: " + destinationKey;
    }
}
--------------------------------------

import java.io.IOException;
import java.io.InputStream;
import java.io.FileOutputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.file.Files;
import java.nio.file.Path;

public class S3FileDownloader {

    public static Path downloadFile(String fileAccessUrl) throws IOException, InterruptedException {
        // Create an HTTP client
        HttpClient httpClient = HttpClient.newHttpClient();

        // Build the HTTP GET request
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(fileAccessUrl))
                .GET()
                .build();

        // Send the request and get the response
        HttpResponse<InputStream> response = httpClient.send(request, HttpResponse.BodyHandlers.ofInputStream());

        // Check if the response is successful
        if (response.statusCode() != 200) {
            throw new IOException("Failed to download file. HTTP status code: " + response.statusCode());
        }

        // Extract filename from the URL
        String[] urlParts = fileAccessUrl.split("/");
        String fileName = urlParts[urlParts.length - 1]; // Get the last part of the URL as the filename

        // Create a temporary file
        Path tempFile = Files.createTempFile(fileName, "");

        // Save the file
        try (InputStream inputStream = response.body();
             FileOutputStream fileOutputStream = new FileOutputStream(tempFile.toFile())) {
            inputStream.transferTo(fileOutputStream);
        }

        return tempFile;
    }
}
