package com.coffee.nyl.security;

import com.amazonaws.auth.AWSStaticCredentialsProvider;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.*;
import com.coffee.nyl.config.NylServiceConfig;
import com.coffee.nyl.entity.LockerRoomUsers;
import com.coffee.nyl.exceptions.CoffeeException;
import com.coffee.nyl.util.ErrorConstants;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FilenameUtils;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.net.URI;
import java.net.URL;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;

@Component
@RequiredArgsConstructor
@Slf4j
public class AWSClientService {

    private final NylServiceConfig nylServiceConfig;

    public String uploadNewFile(MultipartFile multipartFile, String fileName, String exp) {
        AmazonS3 s3Client = getAmazonS3Client();
        File fileObj = convert(multipartFile);
        ObjectMetadata data = new ObjectMetadata();
        data.setContentType(multipartFile.getContentType());
        data.setContentLength(multipartFile.getSize());
        String fileNameForS3 = nylServiceConfig.getFolderName()+ "/"+ exp +"/"+ fileName +"."+ FilenameUtils.getExtension(multipartFile.getOriginalFilename());
        PutObjectRequest putObjectRequest = new PutObjectRequest(nylServiceConfig.getS3BucketName(), fileNameForS3, fileObj);
        s3Client.putObject(putObjectRequest);
        fileObj.delete();
        URL url = generatePreSignedUrl(nylServiceConfig.getS3BucketName(), fileNameForS3);

        return url.toString();
    }

    public String uploadBase64File(String base64String, String prizeName, String exp) {
            AmazonS3 s3Client = getAmazonS3Client();
            byte[] fileContent = Base64.getDecoder().decode(base64String);

            ObjectMetadata metadata = new ObjectMetadata();
            metadata.setContentLength(fileContent.length);
            String fileName = nylServiceConfig.getFolderName()+ "/"+ exp +"/"+ prizeName+"_"+ Instant.now().getEpochSecond() +"."+"jpeg";

            ByteArrayInputStream inputStream = new ByteArrayInputStream(fileContent);
            PutObjectRequest request = new PutObjectRequest(nylServiceConfig.getS3BucketName(), fileName, inputStream, metadata);
            s3Client.putObject(request);
            URL url = generatePreSignedUrl(nylServiceConfig.getS3BucketName(), fileName);
            return url.toString();
    }

    public int deleteAllFilesFromS3(List<String> fileUrls) {
        int deletedCount = 0;
        try {
            AmazonS3 s3Client = getAmazonS3Client();
            List<String> objectKeys = new ArrayList<>();

            for (String fileUrl : fileUrls) {
                URI uri = new URI(fileUrl);
                String objectKey = uri.getPath().substring(1);
                if (objectKey != null && !objectKey.isEmpty()) {
                    objectKeys.add(objectKey);
                } else {
                    log.info("Failed to extract object key from URL: {}", fileUrl);
                }
            }

            if (!objectKeys.isEmpty()) {
                DeleteObjectsRequest deleteRequest = new DeleteObjectsRequest(nylServiceConfig.getS3BucketName())
                        .withKeys(objectKeys.toArray(new String[0]));
                DeleteObjectsResult deleteResult = s3Client.deleteObjects(deleteRequest);
                deletedCount = deleteResult.getDeletedObjects().size();
                log.info("Total number of files deleted successfully from S3 bucket: {}", deletedCount);
            } else {
                log.info("No valid object keys found to delete.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            log.error("Error inside awsClientService while deleting files from S3 bucket!", e.getMessage());
            throw new CoffeeException(ErrorConstants.SYSTEM_ERROR_CODE, ErrorConstants.SOMETHING_WENT_WRONG);
        }
        return deletedCount;
    }

    private AmazonS3 getAmazonS3Client() {
        final BasicAWSCredentials basicAWSCredentials = new BasicAWSCredentials(nylServiceConfig.getAwsAccessKey(), nylServiceConfig.getAwsAccessSecret());
        return AmazonS3ClientBuilder
                .standard()
                .withCredentials(new AWSStaticCredentialsProvider(basicAWSCredentials))
                .withRegion(nylServiceConfig.getAwsRegion())
                .build();
    }

    private File convert(MultipartFile file){
        File convertedFile = new File(file.getOriginalFilename());
        try(FileOutputStream fos = new FileOutputStream(convertedFile)) {
            fos.write(file.getBytes());
        } catch (Exception ex) {
            log.error("Error while converting multipartFile to file type", ex.getMessage());
        }
        return convertedFile;
    }

    private URL generatePreSignedUrl(String bucketName, String key) {
        AmazonS3 s3Client = getAmazonS3Client();
        return s3Client.getUrl(bucketName,key);
    }

}