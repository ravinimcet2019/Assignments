import com.sbi.epay.encryptdecrypt.exception.EncryptionDecryptionException;
import com.sbi.epay.sdk.api.model.response.CustomerResponse;
import com.sbi.epay.sdk.exceptions.SBIEpayException;
import com.sbi.epay.sdk.utils.EncryptionDecryptionUtil;
import org.json.JSONObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.Mockito;

import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class CustomerClientTest {

    private static final String TEST_KEY = "testKey";
    private static final String TEST_SECRET = "testSecret";
    private static final String TEST_ENCRYPTION_KEY = "testEncryptionKey";
    private static final String ENCRYPTED_VALUE = "encryptedValue";
    private static final String DECRYPTED_VALUE = "decryptedValue";

    private CustomerClient customerClient;

    @BeforeEach
    void setUp() {
        customerClient = new CustomerClient(TEST_KEY, TEST_SECRET, TEST_ENCRYPTION_KEY);
    }

    @Test
    void testCreateCustomer_Success() throws Exception {
        JSONObject mockRequest = new JSONObject();
        mockRequest.put("customerName", "John Doe");

        try (MockedStatic<EncryptionDecryptionUtil> encryptionMock = mockStatic(EncryptionDecryptionUtil.class)) {
            // Mock Encryption
            encryptionMock.when(() -> EncryptionDecryptionUtil.encryptValue(any(), any())).thenReturn(ENCRYPTED_VALUE);
            encryptionMock.when(() -> EncryptionDecryptionUtil.decryptValue(any(), any())).thenReturn(DECRYPTED_VALUE);

            // Spy on CustomerClient and mock the private method
            CustomerClient spyClient = spy(customerClient);
            doReturn(DECRYPTED_VALUE).when(spyClient).createCustomer(ENCRYPTED_VALUE);

            // Call the method
            String response = spyClient.create(mockRequest);

            // Verify encryption was called
            encryptionMock.verify(() -> EncryptionDecryptionUtil.encryptValue(TEST_ENCRYPTION_KEY, mockRequest.toString()), times(1));

            // Assert result
            assertEquals(DECRYPTED_VALUE, response);
        }
    }

    @Test
    void testCreateCustomer_EncryptionFailure() {
        JSONObject mockRequest = new JSONObject();
        mockRequest.put("customerName", "John Doe");

        try (MockedStatic<EncryptionDecryptionUtil> encryptionMock = mockStatic(EncryptionDecryptionUtil.class)) {
            // Simulate Encryption Failure
            encryptionMock.when(() -> EncryptionDecryptionUtil.encryptValue(any(), any()))
                    .thenThrow(new EncryptionDecryptionException("Encryption failed"));

            // Call and verify exception
            SBIEpayException exception = assertThrows(SBIEpayException.class, () -> customerClient.create(mockRequest));
            assertEquals("Encryption failed", exception.getCause().getMessage());

            encryptionMock.verify(() -> EncryptionDecryptionUtil.encryptValue(TEST_ENCRYPTION_KEY, mockRequest.toString()), times(1));
        }
    }

    @Test
    void testCreateCustomer_DecryptionFailure() throws Exception {
        try (MockedStatic<EncryptionDecryptionUtil> encryptionMock = mockStatic(EncryptionDecryptionUtil.class)) {
            // Mock Encryption & Decryption
            encryptionMock.when(() -> EncryptionDecryptionUtil.encryptValue(any(), any())).thenReturn(ENCRYPTED_VALUE);
            encryptionMock.when(() -> EncryptionDecryptionUtil.decryptValue(any(), any()))
                    .thenThrow(new EncryptionDecryptionException("Decryption failed"));

            // Spy and mock the private method
            CustomerClient spyClient = spy(customerClient);
            doReturn("invalidEncryptedResponse").when(spyClient).createCustomer(ENCRYPTED_VALUE);

            // Call and verify exception
            SBIEpayException exception = assertThrows(SBIEpayException.class, () -> spyClient.create(new JSONObject()));
            assertEquals("Decryption failed", exception.getCause().getMessage());
        }
    }

    @Test
    void testCreateCustomer_APIResponseEmpty() {
        try (MockedStatic<EncryptionDecryptionUtil> encryptionMock = mockStatic(EncryptionDecryptionUtil.class)) {
            encryptionMock.when(() -> EncryptionDecryptionUtil.encryptValue(any(), any())).thenReturn(ENCRYPTED_VALUE);

            // Spy and mock the private method to return an empty list
            CustomerClient spyClient = spy(customerClient);
            doReturn("").when(spyClient).createCustomer(ENCRYPTED_VALUE);

            // Call and verify exception
            SBIEpayException exception = assertThrows(SBIEpayException.class, () -> spyClient.create(new JSONObject()));
            assertTrue(exception.getMessage().contains("Customer creation failed"));
        }
    }

    @Test
    void testCreateCustomer_SuccessfullyDecryptsResponse() throws Exception {
        try (MockedStatic<EncryptionDecryptionUtil> encryptionMock = mockStatic(EncryptionDecryptionUtil.class)) {
            encryptionMock.when(() -> EncryptionDecryptionUtil.encryptValue(any(), any())).thenReturn(ENCRYPTED_VALUE);
            encryptionMock.when(() -> EncryptionDecryptionUtil.decryptValue(any(), any())).thenReturn(DECRYPTED_VALUE);

            // Spy and mock the private method
            CustomerClient spyClient = spy(customerClient);
            doReturn(DECRYPTED_VALUE).when(spyClient).createCustomer(ENCRYPTED_VALUE);

            String response = spyClient.create(new JSONObject());

            // Verify decryption was called
            encryptionMock.verify(() -> EncryptionDecryptionUtil.decryptValue(TEST_ENCRYPTION_KEY, DECRYPTED_VALUE), times(1));

            // Assert result
            assertEquals(DECRYPTED_VALUE, response);
        }
    }
}
------------------------------------------

import com.sbi.epay.encryptdecrypt.exception.EncryptionDecryptionException;
import com.sbi.epay.sdk.api.model.response.CustomerResponse;
import com.sbi.epay.sdk.exceptions.SBIEpayException;
import com.sbi.epay.sdk.utils.EncryptionDecryptionUtil;
import org.json.JSONObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class CustomerClientTest {

    private static final String TEST_KEY = "testKey";
    private static final String TEST_SECRET = "testSecret";
    private static final String TEST_ENCRYPTION_KEY = "testEncryptionKey";
    private static final String ENCRYPTED_VALUE = "encryptedValue";
    private static final String DECRYPTED_VALUE = "decryptedValue";

    private CustomerClient customerClient;

    @BeforeEach
    void setUp() {
        customerClient = new CustomerClient(TEST_KEY, TEST_SECRET, TEST_ENCRYPTION_KEY);
    }

    @Test
    void testCreateCustomer_Success() throws Exception {
        JSONObject mockRequest = new JSONObject();
        mockRequest.put("customerName", "John Doe");

        try (MockedStatic<EncryptionDecryptionUtil> encryptionMock = mockStatic(EncryptionDecryptionUtil.class)) {
            // Mock encryption & decryption
            encryptionMock.when(() -> EncryptionDecryptionUtil.encryptValue(any(), any())).thenReturn(ENCRYPTED_VALUE);
            encryptionMock.when(() -> EncryptionDecryptionUtil.decryptValue(any(), any())).thenReturn(DECRYPTED_VALUE);

            // Call the actual method (not mocking private methods)
            String response = customerClient.create(mockRequest);

            // Verify encryption was called
            encryptionMock.verify(() -> EncryptionDecryptionUtil.encryptValue(TEST_ENCRYPTION_KEY, mockRequest.toString()), times(1));

            // Assert result
            assertEquals(DECRYPTED_VALUE, response);
        }
    }

    @Test
    void testCreateCustomer_EncryptionFailure() {
        JSONObject mockRequest = new JSONObject();
        mockRequest.put("customerName", "John Doe");

        try (MockedStatic<EncryptionDecryptionUtil> encryptionMock = mockStatic(EncryptionDecryptionUtil.class)) {
            // Simulate Encryption Failure
            encryptionMock.when(() -> EncryptionDecryptionUtil.encryptValue(any(), any()))
                    .thenThrow(new EncryptionDecryptionException("Encryption failed"));

            // Call and verify exception
            SBIEpayException exception = assertThrows(SBIEpayException.class, () -> customerClient.create(mockRequest));
            assertEquals("Encryption failed", exception.getCause().getMessage());

            encryptionMock.verify(() -> EncryptionDecryptionUtil.encryptValue(TEST_ENCRYPTION_KEY, mockRequest.toString()), times(1));
        }
    }

    @Test
    void testCreateCustomer_DecryptionFailure() throws Exception {
        JSONObject mockRequest = new JSONObject();
        mockRequest.put("customerName", "John Doe");

        try (MockedStatic<EncryptionDecryptionUtil> encryptionMock = mockStatic(EncryptionDecryptionUtil.class)) {
            // Mock Encryption
            encryptionMock.when(() -> EncryptionDecryptionUtil.encryptValue(any(), any())).thenReturn(ENCRYPTED_VALUE);

            // Simulate Decryption Failure
            encryptionMock.when(() -> EncryptionDecryptionUtil.decryptValue(any(), any()))
                    .thenThrow(new EncryptionDecryptionException("Decryption failed"));

            // Call and verify exception
            SBIEpayException exception = assertThrows(SBIEpayException.class, () -> customerClient.create(mockRequest));
            assertEquals("Decryption failed", exception.getCause().getMessage());
        }
    }

    @Test
    void testCreateCustomer_APIResponseEmpty() throws Exception {
        JSONObject mockRequest = new JSONObject();
        mockRequest.put("customerName", "John Doe");

        try (MockedStatic<EncryptionDecryptionUtil> encryptionMock = mockStatic(EncryptionDecryptionUtil.class)) {
            encryptionMock.when(() -> EncryptionDecryptionUtil.encryptValue(any(), any())).thenReturn(ENCRYPTED_VALUE);

            // Call createCustomer method with a response that is empty
            SBIEpayException exception = assertThrows(SBIEpayException.class, () -> customerClient.create(mockRequest));
            assertTrue(exception.getMessage().contains("Customer creation failed"));
        }
    }

    @Test
    void testCreateCustomer_SuccessfullyDecryptsResponse() throws Exception {
        JSONObject mockRequest = new JSONObject();
        mockRequest.put("customerName", "John Doe");

        try (MockedStatic<EncryptionDecryptionUtil> encryptionMock = mockStatic(EncryptionDecryptionUtil.class)) {
            encryptionMock.when(() -> EncryptionDecryptionUtil.encryptValue(any(), any())).thenReturn(ENCRYPTED_VALUE);
            encryptionMock.when(() -> EncryptionDecryptionUtil.decryptValue(any(), any())).thenReturn(DECRYPTED_VALUE);

            String response = customerClient.create(mockRequest);

            // Verify decryption was called
            encryptionMock.verify(() -> EncryptionDecryptionUtil.decryptValue(TEST_ENCRYPTION_KEY, DECRYPTED_VALUE), times(1));

            // Assert result
            assertEquals(DECRYPTED_VALUE, response);
        }
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.razorpay</groupId>
  <artifactId>razorpay-java</artifactId>
  <version>1.4.8</version>
  <packaging>jar</packaging>

  <name>razorpay-java</name>
  <description>Official java bindings for the Razorpay API</description>
  <url>https://github.com/razorpay/razorpay-java</url>

  <developers>
    <developer>
      <name>Razorpay</name>
      <email>developers@razorpay.com</email>
      <organization>Razorpay</organization>
      <organizationUrl>https://www.razorpay.com</organizationUrl>
    </developer>
  </developers>

  <scm>
    <connection>scm:git:git@github.com:razorpay/razorpay-java.git</connection>
    <developerConnection>scm:git:git@github.com:razorpay/razorpay-java.git</developerConnection>
    <url>git@github.com:razorpay/razorpay-java.git</url>
  </scm>

  <licenses>
    <license>
      <name>MIT License</name>
      <url>http://www.opensource.org/licenses/mit-license.php</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
  </properties>

  <dependencies>

    <!-- test dependencies -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.13.2</version>
      <scope>test</scope>
    </dependency>

    <!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-inline</artifactId>
      <version>2.13.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.json</groupId>
      <artifactId>json</artifactId>
      <scope>test</scope>
    </dependency>
    <!-- test dependencies -->


    <dependency>
      <groupId>com.squareup.okhttp3</groupId>
      <artifactId>okhttp</artifactId>
      <version>3.10.0</version>
    </dependency>

    <dependency>
      <groupId>com.squareup.okhttp3</groupId>
      <artifactId>logging-interceptor</artifactId>
      <version>3.10.0</version>
    </dependency>

    <dependency>
      <groupId>org.json</groupId>
      <artifactId>json</artifactId>
      <version>20231013</version>
    </dependency>

    <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
      <version>1.11</version>
    </dependency>

    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-text</artifactId>
      <version>1.3</version>
    </dependency>

  </dependencies>

  <distributionManagement>
    <snapshotRepository>
      <id>ossrh</id>
      <url>https://oss.sonatype.org/content/repositories/releases/</url>
    </snapshotRepository>
    <repository>
      <id>ossrh</id>
      <url>https://oss.sonatype.org/service/local/repositories/releases/content/</url>
    </repository>
  </distributionManagement>

  <build>

    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>

    <plugins>
      <plugin>
        <groupId>org.sonatype.plugins</groupId>
        <artifactId>nexus-staging-maven-plugin</artifactId>
        <version>1.6.9</version>
        <extensions>true</extensions>
        <configuration>
          <serverId>ossrh</serverId>
          <nexusUrl>https://oss.sonatype.org/</nexusUrl>
          <autoReleaseAfterClose>true</autoReleaseAfterClose>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <version>3.0.1</version>
        <executions>
          <execution>
            <id>attach-sources</id>
            <goals>
              <goal>jar-no-fork</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>3.0.1</version>
        <executions>
          <execution>
            <id>attach-javadocs</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>0.8.7</version>
        <configuration>
          <excludes>
            <exclude>com/razorpay/**/EntityNameURLMapping.class</exclude>
            <exclude>com/razorpay/**/CustomTLSSocketFactory.class</exclude>
            <exclude>com/razorpay/**/Constants.class</exclude>
            <exclude>com/razorpay/**/Methods.class</exclude>
          </excludes>
        </configuration>
        <executions>
          <execution>
            <id>prepare-agent</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>report</id>
            <phase>test</phase>
            <goals>
              <goal>report</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-gpg-plugin</artifactId>
        <version>1.6</version>
        <executions>
          <execution>
            <id>sign-artifacts</id>
            <phase>verify</phase>
            <goals>
              <goal>sign</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <!-- Prevent gpg from using pinentry programs -->
          <gpgArguments>
            <arg>--pinentry-mode</arg>
            <arg>loopback</arg>
          </gpgArguments>
        </configuration>
      </plugin>       
    </plugins>

  </build>

</project>
